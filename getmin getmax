#include<stdio.h>
#include<stdlib.h>

struct stack
{
    int *s;
    int top;
    int size;
    int max;
    int min;
};

void create(struct stack *st,int siz)
{
    st->top=-1;
    st->size=siz;
    st->s=(int *)malloc(siz * sizeof(int));

}

int isfull(struct stack *st)
{
    if(st->top==(st->size)-1)
    {
        return 1;
    }
    return 0;
}

int isempty(struct stack *st)
{
    if(st->top==-1)
        return 1;
    return 0;
}
int getmin(struct stack *st)
{
    return (st->min);
}
int getmax(struct stack *st)
{
    return (st->max);
}
void push(struct stack *st,int val)
{
     if(isfull(st)==1)
     {
         printf("\nSTACK OVERFLOW");
         return;
     }
     (st->top)++;
     st->s[st->top]=val;
     if(st->top==0)
        st->min=st->max=val;

     if(val<st->min)
       st->min=val;
     if(val>st->max)
        st->max=val;

}
int pop(struct stack *st)
{
    int x=-1;
    if(isempty(st)==-1)
    {
        printf("\nSTACK UNDERFLOW");
        return x;
    }

    x=st->s[st->top];
    st->s[st->top]=0;
    (st->top)--;
    return x;
}

int peek(struct stack *st,int pos)
{
    int x;
    if(st->top-pos+1<0)
    {
        printf("\nInvalid position");
        return -1;
    }
    x=st->top-pos+1;
    return st->s[x];
}

int stacktop(struct stack *st)
{
    if(st->top==-1)
        return -1;
    else
        return st->s[st->top];
}

void print(struct stack *st)
{
    printf("\nElements in the stack are:\n");
    for(int i=st->top;i>=0;i--)
    {
        printf("%d\n",st->s[i]);
    }
}

void cpy_stack(struct stack *A,struct stack *B)
{
    struct stack C;
    int siz=A->size;
    create(&C,siz);
    int Atop=A->size;
    while(Atop>=0)
    {
        int x=peek(A,Atop);
        push(&C,x);
        Atop--;
    }
    int Ctop=C.size;
    while(Ctop>=0)
    {
        int x=pop(&C);
        push(B,x);
        Ctop--;
    }
}

int main()
{
    struct stack A;
    create(&A,5);
    push(&A,7);
    push(&A,9);
    push(&A,2);
    push(&A,6);
    push(&A,3);

    print(&A);

    struct stack B;
    create(&B,5);


    cpy_stack(&A,&B);
    print(&B);

    int min=getmin(&A);
    printf("\nMinimum element of the stack: %d",min);

    int max=getmax(&A);
    printf("\nMaximum element of the stack: %d",max);
    return 0;
}
