#include<stdio.h>
#include<stdlib.h>

struct stack
{
    int *s;
    int top;
    int size;
};

void create(struct stack *st,int siz)
{
    st->top=-1;
    st->size=siz;
    st->s=(int *)malloc(siz * sizeof(int));
}

int isfull(struct stack *st)
{
    if(st->top==(st->size)-1)
    {
        return 1;
    }
    return 0;
}

int isempty(struct stack *st)
{
    if(st->top==-1)
        return 1;
    return 0;
}

void push(struct stack *st,int val)
{
     if(isfull(st)==1)
     {
         printf("\nSTACK OVERFLOW");
         return;
     }
     (st->top)++;
     st->s[st->top]=val;

}
int pop(struct stack *st)
{
    int x=-1;
    if(isempty(st)==-1)
    {
        printf("\nSTACK UNDERFLOW");
        return x;
    }

    x=st->s[st->top];
    st->s[st->top]=0;
    (st->top)--;
    return x;
}

int peek(struct stack *st,int pos)
{
    int x;
    if(st->top-pos+1<0)
    {
        printf("\nInvalid position");
        return -1;
    }
    x=st->top-pos+1;
    return st->s[x];
}

int stacktop(struct stack *st)
{
    if(st->top==-1)
        return -1;
    else
        return st->s[st->top];
}

void print(struct stack *st)
{
    printf("\nElements in the stack are:\n");
    for(int i=st->top;i>=0;i--)
    {
        printf("%d\n",st->s[i]);
    }
}

int main()
{
    struct stack s1;
    create(&s1,7);
    push(&s1,5);
    push(&s1,7);
    push(&s1,6);
    push(&s1,9);
    print(&s1);
    printf("\n\n");
    pop(&s1);
    print(&s1);
    struct stack s2;
    create(&s2,5);
    push(&s2,9);
    push(&s2,8);
    push(&s2,45);
    push(&s2,30);
    print(&s2);
    return 0;
}
